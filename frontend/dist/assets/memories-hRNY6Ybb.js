import{V as M,r as d,K as r,q as n,x as h}from"./index-DdV45Fqk.js";const w=M("memories",()=>{const o=d([]),a=d(!1),{emit:i}=h();async function l(){a.value=!0;try{const e=await r.get("/api/memories");o.value=e.data}catch(e){console.error("Failed to fetch memories:",e),o.value=[]}finally{a.value=!1}}async function m(e){const s=n();try{const t=await r.post("/api/memories",e);o.value.unshift(t.data),i("memories:updated"),s.addNotification("Memory created successfully.","success")}catch(t){console.error("Failed to add memory:",t)}}async function f(e,s){const t=n();try{const c=await r.put(`/api/memories/${e}`,s),u=o.value.findIndex(v=>v.id===e);u!==-1&&(o.value[u]=c.data),i("memories:updated"),t.addNotification("Memory updated successfully.","success")}catch(c){console.error("Failed to update memory:",c)}}async function p(e){const s=n();try{await r.delete(`/api/memories/${e}`),o.value=o.value.filter(t=>t.id!==e),i("memories:updated"),s.addNotification("Memory deleted.","success")}catch(t){console.error("Failed to delete memory:",t)}}function y(){o.value=[],a.value=!1}return{memories:o,isLoading:a,fetchMemories:l,addMemory:m,updateMemory:f,deleteMemory:p,$reset:y}});export{w as useMemoriesStore};
